options {

}

PARSER_BEGIN(MiniC)
import java.io.*;
import java.util.*;

/**  Analyseur lexico-syntaxique Mini-C */
public class MiniC {

  static private Result result = new Result();
  static private ArrayList<Variable> variables = new ArrayList<Variable>();
  static private int tempCount = 1 ;

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
      MiniC parser = null ; //new MiniC(System.in);
      try {
            parser = new MiniC (new FileInputStream("test.txt"));
            SimpleNode n = parser.Z();
            //n.dump("");
      }
      catch (FileNotFoundException e) {
            System.out.println("File not found. Exiting.") ;
            System.exit(0) ;
      }
      catch(Exception e){
            System.out.println(e);
      }
  }
  static private String nextTemp (){
    String s = "TEMP"+Integer.toString(tempCount);
    tempCount ++;
    return s;
  }
  static private void checkVariable (Variable v){
    if (variables.contains(v)){
      result.addError("Identifier "+v.getName()+" already exists");
    }
    else {
      variables.add(v);
    }
  }
  static private String variableType (String name){
    String type = null ;
    for (Variable v : variables){
        if(v.getName().equals(name)){
            type = v.getType() ;
            break;
        }
    }

    if (type==null){
       result.addError("Identifier "+name+" not found");
    }
    return type;
  }
  static private String resultType (String type1, String type2){
    String type = null ;
    if (type1 !=null && type2 !=null){
       if (type1 =="float" || type2 == "float"){
              type = "float" ;
       }
       else {
              type = "int" ;
       }
    }
    else {
        result.addError("unrecognized identifier");
    }
    return type;
  }

  static boolean compatibleTypes(String type1, String type2){
    String intS = "int";
    String floatS = "float" ;

    if (type1 ==null || type2 ==null){
        result.addError("Unrecognized identifier");
        return false;
    }
    else {
        if (type1.equals(intS) && type2.equals(floatS)){
                result.addError("Cannot assign float to int");
                return false;
        }
    }
    return true;
  }

  public static void incrementNum_quad() {Quadruplet.incrementNum_quad();}
  public static int getNum_quad() {
          return Quadruplet.getNum_quad();
  }
}

PARSER_END(MiniC)



SKIP : {
  <" ">
| <"\t">
| <"\n">
| <"\r">
}

TOKEN : { < PlusMinus  : "+" | "-" > }
TOKEN : { < TermOp : "*" | "/" > }
TOKEN : { < Compare  : "==" | "<" | ">" | "<=" | ">=" | "!="> }
TOKEN : { < TYPE : "int" | "float" > }
TOKEN : { < COLON : "," > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < ASSIGN : "=" > }
TOKEN : { < FOR : "for" > }
TOKEN : { < WHILE : "while" > }
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }
TOKEN : { < OPENB : "(" > }
TOKEN : { < CLOSEB : ")" > }
TOKEN : { < OPENC : "{" > }
TOKEN : { < CLOSEC : "}" > }
TOKEN : { < INT : (["0"-"9"])+ > }
TOKEN : { < FLOAT : (<INT>"."<INT>)+ > }
TOKEN : { < IDENTIFIER : (["a"-"z"])+ > }

SimpleNode Z() :
{
    Quadruplet q;
    String f ;
}
{
  f = Function()
  <EOF>
  {
    result.printResult (f);
    return jjtThis;
  }
}

String Function() :
{
    Token t;
}
{
   Type()
  t = <IDENTIFIER>
  <OPENB>
  ArgList()
  <CLOSEB>
  CompoundStmt()
  {
    return t.image ;
  }
}

void ArgList() :
{}
{
  Arg()
  ArgListR()
}

void ArgListR() :
{}
{
  (
  <COLON>
  Arg()
  ArgListR()
  )?
}

void Arg() :
{
  String type;
  String name;
  Variable v;
  Token t;
}
{
  type = Type ()
  t = <IDENTIFIER>
  {
        name = t.image;
        v = new Variable(type,name);
        checkVariable (v);
  }
}

String Type() :
{
    Token t = null;
}
{
  t = <TYPE>
  {
    return t.image;
  }
}

void IdentList (String type) :
{
    String name;
    Variable v;
    Token t = null;
}
{
   t = <IDENTIFIER>
   {
       name = t.image;
       v = new Variable(type,name);
       checkVariable (v);
   }
   IdentListF(type)
}

void IdentListF (String type) :
{}
{
   (
   <COLON>
   IdentList(type)
   )?
}

void Stmt () :
{
    String type;
    Variable e1;
    Quadruplet q;
    int forI = -1;
    boolean c;
}
{
   /*ForStmt*/
   (
        <FOR> <OPENB>
        e1 = Expr()
        <SEMICOLON>
        {
            int loopF = getNum_quad();
        }
        // ForStmtC
        (
               (
                       (
                           Expr()
                           <SEMICOLON>
                           {
                                c = true;
                                forI = getNum_quad();
                                incrementNum_quad();
                           }
                       )
                       |
                       (
                           <SEMICOLON>
                           {
                                c = false;
                           }
                       )
               )
               // ForStmtCC
                (
                       (
                           Expr()
                           <CLOSEB>
                           Stmt()
                       )
                       |
                       (
                           <CLOSEB>
                           Stmt()
                       )
                )
                {
                      if (c){
                          q = new Quadruplet ( forI,"JZ" , "", "", Integer.toString(getNum_quad() + 1));
                          result.addQuad(q, forI);
                      }
                      q = new Quadruplet ("JMP" , "", "", Integer.toString(loopF));
                      result.addQuad(q);
                }
        )
   )

   |
   /*WhileStmt */
   (
       <WHILE> <OPENB>
       {
            int loop = getNum_quad();
       }
       e1 = Expr()
       <CLOSEB>
        {
            int ifI;
            ifI = getNum_quad();
            incrementNum_quad();
        }
        Stmt()
        {
            if (e1.getType() != null){
                q = new Quadruplet ( ifI,"JZ" , "", "", Integer.toString(getNum_quad() + 1));
                result.addQuad(q, ifI);
                q = new Quadruplet ("JMP" , "", "", Integer.toString(loop));
                result.addQuad(q);
            }
        }
   )

   |
   /*IFStmt */
   (
        <IF> <OPENB>
        e1 = Expr()
        <CLOSEB>
        {
            int elseI, cont;
            ifI = getNum_quad();
            incrementNum_quad();
        }
        Stmt()
        {
            elseI = getNum_quad();
            if (e1.getType() != null){
                q = new Quadruplet ( ifI,"JZ" , "", "", Integer.toString(elseI + 1));
                result.addQuad(q, ifI);
            }
            incrementNum_quad();
        }
        ElsePart(elseI)
   )

   |
   /*CompoundStmt*/
   (<OPENC> A ())

   |
   /*Declaration*/
   (
       type = Type ()
       IdentList(type)
       <SEMICOLON>
   )

   |
   /*Expression*/
   (

       Expr()
       <SEMICOLON>
   )

   |
   /*SemiColon*/
   (<SEMICOLON>)
}

void ElsePart (int elseI) :
{}
{
   (
       LOOKAHEAD(1)
       <ELSE>
       Stmt()
        {
                Quadruplet q = new Quadruplet ( elseI,"JMP" , "", "", Integer.toString(getNum_quad()));
                result.addQuad(q, elseI);
        }
   )?
}

void CompoundStmt () :
{}
{
   <OPENC>
   A()
}

void A () :
{}
{
   (StmtList() <CLOSEC>)
   |
   (<CLOSEC>)
}

void StmtList () :
{}
{
   Stmt()
   (StmtList())?
}

Variable Expr () :
{
    String name ;
    String type;
    Variable v, r;
    Token t = null;
}
{
   (
       t = <IDENTIFIER>
       {
           name = t.image;
           type = variableType(name);
           v = new Variable (type,name);
       }
       r = ExprR (v)
       {
          return r;
       }
   )
   |
   (
       r = Rvalue()
       {
          return r;
       }
   )
}
Variable ExprR (Variable v1) :
{
    Variable v2;
    boolean compatibleType;
    Quadruplet q;
    String op ;
    Token t;
}
{
   (
        t = <ASSIGN>
        v2 = Expr ()
        {
            op = t.image;
            compatibleType = compatibleTypes(v1.getType(),v2.getType());
            if (compatibleType){
                q = new Quadruplet ( op , v2.getName(), "", v1.getName());
                result.addQuad(q);
            }
        }
        {
            return v1;
        }
   )
   |
   (
       v2 = TermR(v1)
       v2 = MagR(v2)
       v2 = RvalueR(v2)
       {
            return v2;
       }
   )
}

Variable Rvalue () :
{
    Variable v1,v2;
}
{
   v1 = MagB()
   v2 = RvalueR(v1)
   {
        return v2;
   }
}
Variable RvalueR (Variable v1) :
{
    String op, name,type;
    Variable v2, r, temp;
    Quadruplet q;
}
{
   (
       op = Compare ()
       v2 = Mag()
        {
            name = nextTemp();
            type = "int";
            temp = new Variable(type,name);
            if (v1.getType() == null || v2.getType() == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v1.getName(), v2.getName(), name);
                result.addQuad(q);
            }
        }
        r = RvalueR(temp)
        {
            return r ;
        }
   )
   |
   {
        return v1;
   }
}
String Compare () :
{
    Token t = null;
}
{
   t = <Compare>
  {
    return t.image;
  }
}

Variable Mag () :
{
    Variable v, r;
}
{
   v = Term()
   r = MagR(v)
   {
        return r ;
   }
}

Variable MagR (Variable v1) :
{
    String type;
    String name;
    Variable v2, r ;
    Variable temp ;
    String op ;
    Token t;
    Quadruplet q;
}
{
   (
        t = <PlusMinus>
        v2 = Term()
        {
            op = t.image;
            name = nextTemp();
            type = resultType (v1.getType(), v2.getType());
            temp = new Variable(type,name);
            if (type == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v1.getName(), v2.getName(), name);
                result.addQuad(q);
            }
        }

        r = MagR(temp)
        {
            return r ;
        }
   )
   |
   (
       {
           return v1 ;
       }
   )
}

Variable Term () :
{
    Variable v, r;
}
{
   v = Factor()
   r = TermR(v)
   {
        return r ;
   }
}

Variable TermR (Variable v1) :
{
    String type;
    String name;
    Variable v2 , r ;
    Variable temp ;
    String op ;
    Token t;
    Quadruplet q;
}
{
   (

        t = <TermOp>
        v2 = Factor()
        {
            op = t.image;
            name = nextTemp();
            type = resultType (v1.getType(), v2.getType());
            temp = new Variable(type,name);
            if (type == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v1.getName(), v2.getName(), name);
                result.addQuad(q);
            }
        }
        r = TermR(temp)
        {
            return r ;
        }
   )
   |
   (
       {
           return v1 ;
       }
   )
}
Variable Factor () :
{
    String type;
    String name;
    Variable v ;
    Variable temp ;
    String val;
    String op ;
    Quadruplet q;
    Token t;
}
{
   (
        <OPENB>
        v = Expr()
        <CLOSEB>
        {
            return v ;
        }
   )
   |

   (
        t = <IDENTIFIER>
        {
            name = t.image;
            type = variableType (name);
            v = new Variable(type, name);
            return v ;
        }
   )
   |
   (
        t = <PlusMinus>
        v = Factor()
        {
            op = t.image;
            name = nextTemp();
            type = v.getType();
            temp = new Variable(type,name);
            if (type == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v.getName(), "", name);
                result.addQuad(q);
            }
            return temp ;
        }
   )

   |
   (
       t = <FLOAT>
       {
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "float";
            temp = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            result.addQuad(q);
            return temp ;
       }
   )

   |
   (
       t = <INT>
       {
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "int";
            temp = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            result.addQuad(q);
            return temp ;
       }
   )
}

/*No identifier conflict*/

Variable MagB () :
{
    Variable v, r;
}
{
   v = TermB()
   r =  MagR(v)
   {
        return r ;
   }
}
Variable TermB () :
{
    Variable v,r;
}
{
   v = FactorB()
   r = TermR(v)
   {
        return r ;
   }
}
Variable FactorB () :
{
    String type;
    String name;
    Variable v ;
    Token t;
    String val;
    String op ;
    Quadruplet q;
}
{
   (
        <OPENB>
        v = Expr()
        <CLOSEB>
        {
            return v ;
        }
   )
   |
   (
        t = <PlusMinus>
        v = Factor()
        {
            op = t.image;
            name = nextTemp ();
            type = v.getType();
            v = new Variable(type,name);
            q = new Quadruplet ( op , v.getName(), "", name);
            result.addQuad(q);
            return v ;
        }
   )

   |
   (
       t = <FLOAT>
       {
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "float";
            v = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            result.addQuad(q);
            return v ;
       }
   )

   |
   (
       t = <INT>
       {
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "int";
            v = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            result.addQuad(q);
            return v ;
       }
   )
}