/* Generated By:JJTree&JavaCC: Do not edit this line. MiniC.java */
import java.io.*;
import java.util.*;

/**  Analyseur lexico-syntaxique Mini-C */
public class MiniC/*@bgen(jjtree)*/implements MiniCTreeConstants, MiniCConstants {/*@bgen(jjtree)*/
  protected static JJTMiniCState jjtree = new JJTMiniCState();
  static private Result result = new Result();
  static private ArrayList<Variable> variables = new ArrayList<Variable>();
  static private int tempCount = 1 ;

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
      MiniC parser = null ; //new MiniC(System.in);
      try {
            parser = new MiniC (new FileInputStream("test.txt"));
            SimpleNode n = parser.Z();
            //n.dump("");
      }
      catch (FileNotFoundException e) {
            System.out.println("File not found. Exiting.") ;
            System.exit(0) ;
      }
      catch(Exception e){
            System.out.println(e);
      }
  }
  static private String nextTemp (){
    String s = "TEMP"+Integer.toString(tempCount);
    tempCount ++;
    return s;
  }
  static private void checkVariable (Variable v){
    if (variables.contains(v)){
      result.addError("Identifier "+v.getName()+" already exists");
    }
    else {
      variables.add(v);
    }
  }
  static private String variableType (String name){
    String type = null ;
    for (Variable v : variables){
        if(v.getName().equals(name)){
            type = v.getType() ;
            break;
        }
    }

    if (type==null){
       result.addError("Identifier "+name+" not found");
    }
    return type;
  }
  static private String resultType (String type1, String type2){
    String type = null ;
    if (type1 !=null && type2 !=null){
       if (type1 =="float" || type2 == "float"){
              type = "float" ;
       }
       else {
              type = "int" ;
       }
    }
    else {
        result.addError("unrecognized identifier");
    }
    return type;
  }

  static boolean compatibleTypes(String type1, String type2){
    String intS = "int";
    String floatS = "float" ;

    if (type1 ==null || type2 ==null){
        result.addError("Unrecognized identifier");
        return false;
    }
    else {
        if (type1.equals(intS) && type2.equals(floatS)){
                result.addError("Cannot assign float to int");
                return false;
        }
    }
    return true;
  }

  public static void incrementNum_quad() {Quadruplet.incrementNum_quad();}
  public static int getNum_quad() {
          return Quadruplet.getNum_quad();
  }

  static final public SimpleNode Z() throws ParseException {
 /*@bgen(jjtree) Z */
    SimpleNode jjtn000 = new SimpleNode(JJTZ);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Quadruplet q;
    String f ;
    try {
      f = Function();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    result.printResult (f);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Function() throws ParseException {
 /*@bgen(jjtree) Function */
    SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      Type();
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(OPENB);
      ArgList();
      jj_consume_token(CLOSEB);
      CompoundStmt();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image ;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ArgList() throws ParseException {
 /*@bgen(jjtree) ArgList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Arg();
      ArgListR();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ArgListR() throws ParseException {
 /*@bgen(jjtree) ArgListR */
  SimpleNode jjtn000 = new SimpleNode(JJTARGLISTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        Arg();
        ArgListR();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Arg() throws ParseException {
 /*@bgen(jjtree) Arg */
  SimpleNode jjtn000 = new SimpleNode(JJTARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String type;
  String name;
  Variable v;
  Token t;
    try {
      type = Type();
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        name = t.image;
        v = new Variable(type,name);
        checkVariable (v);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public String Type() throws ParseException {
 /*@bgen(jjtree) Type */
    SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(TYPE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void IdentList(String type) throws ParseException {
 /*@bgen(jjtree) IdentList */
    SimpleNode jjtn000 = new SimpleNode(JJTIDENTLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String name;
    Variable v;
    Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
       name = t.image;
       v = new Variable(type,name);
       checkVariable (v);
      IdentListF(type);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void IdentListF(String type) throws ParseException {
 /*@bgen(jjtree) IdentListF */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTLISTF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        IdentList(type);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void Stmt() throws ParseException {
 /*@bgen(jjtree) Stmt */
    SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String type;
    Variable e1;
    Quadruplet q;
    int forI = -1;
    boolean c;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(OPENB);
        e1 = Expr();
        jj_consume_token(SEMICOLON);
            int loopF = getNum_quad();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PlusMinus:
        case OPENB:
        case INT:
        case FLOAT:
        case IDENTIFIER:
          Expr();
          jj_consume_token(SEMICOLON);
                                c = true;
                                forI = getNum_quad();
                                incrementNum_quad();
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
                                c = false;
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PlusMinus:
        case OPENB:
        case INT:
        case FLOAT:
        case IDENTIFIER:
          Expr();
          jj_consume_token(CLOSEB);
          Stmt();
          break;
        case CLOSEB:
          jj_consume_token(CLOSEB);
          Stmt();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                      if (c){
                          q = new Quadruplet ( forI,"JZ" , "", "", Integer.toString(getNum_quad() + 1));
                          result.addQuad(q, forI);
                      }
                      q = new Quadruplet ("JMP" , "", "", Integer.toString(loopF));
                      result.addQuad(q);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(OPENB);
            int loop = getNum_quad();
        e1 = Expr();
        jj_consume_token(CLOSEB);
            int ifI;
            ifI = getNum_quad();
            incrementNum_quad();
        Stmt();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            if (e1.getType() != null){
                q = new Quadruplet ( ifI,"JZ" , "", "", Integer.toString(getNum_quad() + 1));
                result.addQuad(q, ifI);
                q = new Quadruplet ("JMP" , "", "", Integer.toString(loop));
                result.addQuad(q);
            }
        break;
      case IF:
        jj_consume_token(IF);
        jj_consume_token(OPENB);
        e1 = Expr();
        jj_consume_token(CLOSEB);
            int elseI, cont;
            ifI = getNum_quad();
            incrementNum_quad();
        Stmt();
            elseI = getNum_quad();
            if (e1.getType() != null){
                q = new Quadruplet ( ifI,"JZ" , "", "", Integer.toString(elseI + 1));
                result.addQuad(q, ifI);
            }
            incrementNum_quad();
        ElsePart(elseI);
        break;
      case OPENC:
        jj_consume_token(OPENC);
        A();
        break;
      case TYPE:
        type = Type();
        IdentList(type);
        jj_consume_token(SEMICOLON);
        break;
      case PlusMinus:
      case OPENB:
      case INT:
      case FLOAT:
      case IDENTIFIER:
        Expr();
        jj_consume_token(SEMICOLON);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void ElsePart(int elseI) throws ParseException {
 /*@bgen(jjtree) ElsePart */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Stmt();
                Quadruplet q = new Quadruplet ( elseI,"JMP" , "", "", Integer.toString(getNum_quad()));
                result.addQuad(q, elseI);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void CompoundStmt() throws ParseException {
 /*@bgen(jjtree) CompoundStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPENC);
      A();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void A() throws ParseException {
 /*@bgen(jjtree) A */
  SimpleNode jjtn000 = new SimpleNode(JJTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PlusMinus:
      case TYPE:
      case SEMICOLON:
      case FOR:
      case WHILE:
      case IF:
      case OPENB:
      case OPENC:
      case INT:
      case FLOAT:
      case IDENTIFIER:
        StmtList();
        jj_consume_token(CLOSEC);
        break;
      case CLOSEC:
        jj_consume_token(CLOSEC);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void StmtList() throws ParseException {
 /*@bgen(jjtree) StmtList */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PlusMinus:
      case TYPE:
      case SEMICOLON:
      case FOR:
      case WHILE:
      case IF:
      case OPENB:
      case OPENC:
      case INT:
      case FLOAT:
      case IDENTIFIER:
        StmtList();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public Variable Expr() throws ParseException {
 /*@bgen(jjtree) Expr */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String name ;
    String type;
    Variable v, r;
    Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
           name = t.image;
           type = variableType(name);
           v = new Variable (type,name);
        r = ExprR(v);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
          {if (true) return r;}
        break;
      case PlusMinus:
      case OPENB:
      case INT:
      case FLOAT:
        r = Rvalue();
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
          {if (true) return r;}
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable ExprR(Variable v1) throws ParseException {
 /*@bgen(jjtree) ExprR */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPRR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Variable v2;
    boolean compatibleType;
    Quadruplet q;
    String op ;
    Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        t = jj_consume_token(ASSIGN);
        v2 = Expr();
            op = t.image;
            compatibleType = compatibleTypes(v1.getType(),v2.getType());
            if (compatibleType){
                q = new Quadruplet ( op , v2.getName(), "", v1.getName());
                result.addQuad(q);
            }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            {if (true) return v1;}
        break;
      default:
        jj_la1[9] = jj_gen;
        v2 = TermR(v1);
        v2 = MagR(v2);
        v2 = RvalueR(v2);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
            {if (true) return v2;}
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable Rvalue() throws ParseException {
 /*@bgen(jjtree) Rvalue */
    SimpleNode jjtn000 = new SimpleNode(JJTRVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Variable v1,v2;
    try {
      v1 = MagB();
      v2 = RvalueR(v1);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
        {if (true) return v2;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable RvalueR(Variable v1) throws ParseException {
 /*@bgen(jjtree) RvalueR */
    SimpleNode jjtn000 = new SimpleNode(JJTRVALUER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String op, name,type;
    Variable v2, r, temp;
    Quadruplet q;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Compare:
        op = Compare();
        v2 = Mag();
            name = nextTemp();
            type = "int";
            temp = new Variable(type,name);
            if (v1.getType() == null || v2.getType() == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v1.getName(), v2.getName(), name);
                result.addQuad(q);
            }
        r = RvalueR(temp);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            {if (true) return r ;}
        break;
      default:
        jj_la1[10] = jj_gen;
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
        {if (true) return v1;}
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Compare() throws ParseException {
 /*@bgen(jjtree) Compare */
    SimpleNode jjtn000 = new SimpleNode(JJTCOMPARE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(Compare);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable Mag() throws ParseException {
 /*@bgen(jjtree) Mag */
    SimpleNode jjtn000 = new SimpleNode(JJTMAG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Variable v, r;
    try {
      v = Term();
      r = MagR(v);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
        {if (true) return r ;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable MagR(Variable v1) throws ParseException {
 /*@bgen(jjtree) MagR */
    SimpleNode jjtn000 = new SimpleNode(JJTMAGR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String type;
    String name;
    Variable v2, r ;
    Variable temp ;
    String op ;
    Token t;
    Quadruplet q;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PlusMinus:
        t = jj_consume_token(PlusMinus);
        v2 = Term();
            op = t.image;
            name = nextTemp();
            type = resultType (v1.getType(), v2.getType());
            temp = new Variable(type,name);
            if (type == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v1.getName(), v2.getName(), name);
                result.addQuad(q);
            }
        r = MagR(temp);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            {if (true) return r ;}
        break;
      default:
        jj_la1[11] = jj_gen;
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
           {if (true) return v1 ;}
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable Term() throws ParseException {
 /*@bgen(jjtree) Term */
    SimpleNode jjtn000 = new SimpleNode(JJTTERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Variable v, r;
    try {
      v = Factor();
      r = TermR(v);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
        {if (true) return r ;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable TermR(Variable v1) throws ParseException {
 /*@bgen(jjtree) TermR */
    SimpleNode jjtn000 = new SimpleNode(JJTTERMR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String type;
    String name;
    Variable v2 , r ;
    Variable temp ;
    String op ;
    Token t;
    Quadruplet q;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TermOp:
        t = jj_consume_token(TermOp);
        v2 = Factor();
            op = t.image;
            name = nextTemp();
            type = resultType (v1.getType(), v2.getType());
            temp = new Variable(type,name);
            if (type == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v1.getName(), v2.getName(), name);
                result.addQuad(q);
            }
        r = TermR(temp);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            {if (true) return r ;}
        break;
      default:
        jj_la1[12] = jj_gen;
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
           {if (true) return v1 ;}
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable Factor() throws ParseException {
 /*@bgen(jjtree) Factor */
    SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String type;
    String name;
    Variable v ;
    Variable temp ;
    String val;
    String op ;
    Quadruplet q;
    Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENB:
        jj_consume_token(OPENB);
        v = Expr();
        jj_consume_token(CLOSEB);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            {if (true) return v ;}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            name = t.image;
            type = variableType (name);
            v = new Variable(type, name);
            {if (true) return v ;}
        break;
      case PlusMinus:
        t = jj_consume_token(PlusMinus);
        v = Factor();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            op = t.image;
            name = nextTemp();
            type = v.getType();
            temp = new Variable(type,name);
            if (type == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v.getName(), "", name);
                result.addQuad(q);
            }
            {if (true) return temp ;}
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "float";
            temp = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            result.addQuad(q);
            {if (true) return temp ;}
        break;
      case INT:
        t = jj_consume_token(INT);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "int";
            temp = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            result.addQuad(q);
            {if (true) return temp ;}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

/*No identifier conflict*/
  static final public Variable MagB() throws ParseException {
 /*@bgen(jjtree) MagB */
    SimpleNode jjtn000 = new SimpleNode(JJTMAGB);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Variable v, r;
    try {
      v = TermB();
      r = MagR(v);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
        {if (true) return r ;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable TermB() throws ParseException {
 /*@bgen(jjtree) TermB */
    SimpleNode jjtn000 = new SimpleNode(JJTTERMB);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Variable v,r;
    try {
      v = FactorB();
      r = TermR(v);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
        {if (true) return r ;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable FactorB() throws ParseException {
 /*@bgen(jjtree) FactorB */
    SimpleNode jjtn000 = new SimpleNode(JJTFACTORB);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String type;
    String name;
    Variable v ;
    Token t;
    String val;
    String op ;
    Quadruplet q;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENB:
        jj_consume_token(OPENB);
        v = Expr();
        jj_consume_token(CLOSEB);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            {if (true) return v ;}
        break;
      case PlusMinus:
        t = jj_consume_token(PlusMinus);
        v = Factor();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            op = t.image;
            name = nextTemp ();
            type = v.getType();
            v = new Variable(type,name);
            q = new Quadruplet ( op , v.getName(), "", name);
            result.addQuad(q);
            {if (true) return v ;}
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "float";
            v = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            result.addQuad(q);
            {if (true) return v ;}
        break;
      case INT:
        t = jj_consume_token(INT);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "int";
            v = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            result.addQuad(q);
            {if (true) return v ;}
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x200,0x710420,0x730020,0x757520,0x8000,0x7d7520,0x757520,0x710020,0x800,0x80,0x20,0x40,0x710020,0x310020,};
   }

  /** Constructor with InputStream. */
  public MiniC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniC(MiniCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
