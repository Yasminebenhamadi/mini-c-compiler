/* Generated By:JavaCC: Do not edit this line. MiniC.java */
import java.io.*;

/**  Analyseur lexico-syntaxique Mini-C */
public class MiniC implements MiniCConstants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
      MiniC parser = null ; //new MiniC(System.in);
      try {
            parser = new MiniC (new FileInputStream("test.txt"));
            parser.Z();
      }
      catch (FileNotFoundException e) {
            System.out.println("File not found. Exiting.") ;
            System.exit(0) ;
      }
      catch(Exception e){
            System.out.println(e);
      }
  }

  static final public void Z() throws ParseException {
    Function();
    jj_consume_token(0);
  }

  static final public void Function() throws ParseException {
    Type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(OPENB);
    ArgList();
    jj_consume_token(CLOSEB);
    CompoundStmt();
  }

  static final public void ArgList() throws ParseException {
    Arg();
    ArgListR();
  }

  static final public void ArgListR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      Arg();
      ArgListR();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void Arg() throws ParseException {
    Type();
    jj_consume_token(IDENTIFIER);
  }

  static final public void Type() throws ParseException {
    jj_consume_token(TYPE);
  }

  static final public void Declaration() throws ParseException {
    Type();
    IdentList();
    jj_consume_token(SEMICOLON);
  }

  static final public void IdentList() throws ParseException {
    jj_consume_token(IDENTIFIER);
    IdentListF();
  }

  static final public void IdentListF() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      IdentList();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(OPENB);
      Expr();
      jj_consume_token(SEMICOLON);
      ForStmtC();
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(OPENB);
      Expr();
      jj_consume_token(CLOSEB);
      Stmt();
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(OPENB);
      Expr();
      jj_consume_token(CLOSEB);
      Stmt();
      ElsePart();
      break;
    case OPENC:
      jj_consume_token(OPENC);
      A();
      break;
    case TYPE:
      Type();
      IdentList();
      jj_consume_token(SEMICOLON);
      break;
    case PlusMinus:
    case OPENB:
    case NUMBER:
    case IDENTIFIER:
      Expr();
      jj_consume_token(SEMICOLON);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ElsePart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Stmt();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void ForStmtC() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PlusMinus:
    case OPENB:
    case NUMBER:
    case IDENTIFIER:
      Expr();
      jj_consume_token(SEMICOLON);
      Expr();
      jj_consume_token(CLOSEB);
      Stmt();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      jj_consume_token(CLOSEB);
      Stmt();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CompoundStmt() throws ParseException {
    jj_consume_token(OPENC);
    A();
  }

  static final public void A() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PlusMinus:
    case TYPE:
    case SEMICOLON:
    case FOR:
    case WHILE:
    case IF:
    case OPENB:
    case OPENC:
    case NUMBER:
    case IDENTIFIER:
      StmtList();
      jj_consume_token(CLOSEC);
      break;
    case CLOSEC:
      jj_consume_token(CLOSEC);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void StmtList() throws ParseException {
    Stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PlusMinus:
    case TYPE:
    case SEMICOLON:
    case FOR:
    case WHILE:
    case IF:
    case OPENB:
    case OPENC:
    case NUMBER:
    case IDENTIFIER:
      StmtList();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void Expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      ExprR();
      break;
    case PlusMinus:
    case OPENB:
    case NUMBER:
      Rvalue();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExprR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Expr();
      break;
    default:
      jj_la1[8] = jj_gen;
      TermR();
      MagR();
      RvalueR();
    }
  }

  static final public void Rvalue() throws ParseException {
    MagB();
    RvalueR();
  }

  static final public void RvalueR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Compare:
      Compare();
      Mag();
      RvalueR();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  static final public void Compare() throws ParseException {
    jj_consume_token(Compare);
  }

  static final public void Mag() throws ParseException {
    Term();
    MagR();
  }

  static final public void MagR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PlusMinus:
      jj_consume_token(PlusMinus);
      Term();
      MagR();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void Term() throws ParseException {
    Factor();
    TermR();
  }

  static final public void TermR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TermOp:
      jj_consume_token(TermOp);
      Factor();
      TermR();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENB:
      jj_consume_token(OPENB);
      Expr();
      jj_consume_token(CLOSEB);
      break;
    case PlusMinus:
      jj_consume_token(PlusMinus);
      Factor();
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*No identifier conflict*/
  static final public void MagB() throws ParseException {
    TermB();
    MagR();
  }

  static final public void TermB() throws ParseException {
    FactorB();
    TermR();
  }

  static final public void FactorB() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENB:
      jj_consume_token(OPENB);
      Expr();
      jj_consume_token(CLOSEB);
      break;
    case PlusMinus:
      jj_consume_token(PlusMinus);
      Factor();
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x200,0x957520,0x8000,0x910420,0x9d7520,0x957520,0x910020,0x800,0x80,0x20,0x40,0x910020,0x110020,};
   }

  /** Constructor with InputStream. */
  public MiniC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniC(MiniCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
