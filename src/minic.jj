/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\minic.jj */
/*@egen*/options {

}

PARSER_BEGIN(MiniC)
import java.io.*;
import java.util.*;

/**  Analyseur lexico-syntaxique Mini-C */
public class MiniC/*@bgen(jjtree)*/implements MiniCTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTMiniCState jjtree = new JJTMiniCState();

/*@egen*/

  static private Result result = new Result();
  static private ArrayList<Variable> variables = new ArrayList<Variable>();
  static private int tempCount = 1 ;

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
      MiniC parser = null ; //new MiniC(System.in);
      try {
            parser = new MiniC (new FileInputStream("test.txt"));
            parser.Z();
      }
      catch (FileNotFoundException e) {
            System.out.println("File not found. Exiting.") ;
            System.exit(0) ;
      }
      catch(Exception e){
            System.out.println(e);
      }
  }
  static private String nextTemp (){
    return "TEMP"+Integer.toString(tempCount);
  }
  static private void checkVariable (Variable v){
    if (variables.contains(v)){
      result.addError("Identifier "+v.getName()+" already exists");
    }
    else {
      variables.add(v);
    }
  }
  static private String variableType (String name){
    String type = null ;
    for (Variable v : variables){
        if(v.getName().equals(name)){
            type = v.getType() ;
            break;
        }
    }
    if (type==null){
       result.addError("Identifier "+name+" not found");
    }
    return type;
  }
  static private String resultType (String type1, String type2){
    String type = null ;
    if (type1 !=null && type2 !=null){
       if (type1 =="float" || type2 == "float"){
              type = "float" ;
       }
       else {
              type = "int" ;
       }
    }
    else {
        result.addError("unrecognized identifier");
    }
    return type;
  }

  static boolean compatibleTypes(String type1, String type2){
    if (type1=="int" && type2=="float"){
        result.addError("Cannot assign float to int");
        return false;
    }
    if (type1 ==null || type2 ==null){
        result.addError("Unrecognized identifier");
        return false;
    }
    return true;
  }
}

PARSER_END(MiniC)



SKIP : {
  <" ">
| <"\t">
| <"\n">
| <"\r">
}

TOKEN : { < PlusMinus  : "+" | "-" > }
TOKEN : { < TermOp : "*" | "/" > }
TOKEN : { < Compare  : "==" | "<" | ">" | "<=" | ">=" | "!="> }
TOKEN : { < TYPE : "int" | "float" > }
TOKEN : { < COLON : "," > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < ASSIGN : "=" > }
TOKEN : { < FOR : "for" > }
TOKEN : { < WHILE : "while" > }
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }
TOKEN : { < OPENB : "(" > }
TOKEN : { < CLOSEB : ")" > }
TOKEN : { < OPENC : "{" > }
TOKEN : { < CLOSEC : "}" > }
TOKEN : { < INT : (["0"-"9"])+ > }
TOKEN : { < FLOAT : (<INT>"."<INT>)+ > }
TOKEN : { < IDENTIFIER : (["a"-"z"])+ > }

SimpleNode Z() :
{/*@bgen(jjtree) Z */
  SimpleNode jjtn000 = new SimpleNode(JJTZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Z */
  try {
/*@egen*/
  Function() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Function() :
{/*@bgen(jjtree) Function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  Type() <IDENTIFIER> <OPENB> ArgList() <CLOSEB> CompoundStmt()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArgList() :
{/*@bgen(jjtree) ArgList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
  try {
/*@egen*/
  Arg()
  ArgListR()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArgListR() :
{/*@bgen(jjtree) ArgListR */
  SimpleNode jjtn000 = new SimpleNode(JJTARGLISTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgListR */
  try {
/*@egen*/
  (
  <COLON>
  Arg()
  ArgListR()
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Arg() :
{/*@bgen(jjtree) Arg */
  SimpleNode jjtn000 = new SimpleNode(JJTARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String type;
  String name;
  Variable v;
  Token t;
}
{/*@bgen(jjtree) Arg */
  try {
/*@egen*/
  type = Type ()
  t = <IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
        name = t.image;
        v = new Variable(type,name);
        checkVariable (v);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Type() :
{/*@bgen(jjtree) Type */
    SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t = null;
}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  <TYPE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IdentList (String type) :
{/*@bgen(jjtree) IdentList */
    SimpleNode jjtn000 = new SimpleNode(JJTIDENTLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String name;
    Variable v;
    Token t = null;
}
{/*@bgen(jjtree) IdentList */
   try {
/*@egen*/
   t = <IDENTIFIER>
   {
       name = t.image;
       v = new Variable(type,name);
       checkVariable (v);
   }
   IdentListF(type)/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void IdentListF (String type) :
{/*@bgen(jjtree) IdentListF */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTLISTF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdentListF */
   try {
/*@egen*/
   (
   <COLON>
   IdentList(type)
   )?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Stmt () :
{/*@bgen(jjtree) Stmt */
    SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String type;
}
{/*@bgen(jjtree) Stmt */
   try {
/*@egen*/
   /*ForStmt*/
   (<FOR> <OPENB> Expr() <SEMICOLON> ForStmtC())

   |
   /*WhileStmt */
   (<WHILE> <OPENB> Expr() <CLOSEB> Stmt())

   |
   /*IFStmt */
   (<IF> <OPENB> Expr() <CLOSEB> Stmt() ElsePart())

   |
   /*CompoundStmt*/
   (<OPENC> A ())

   |
   /*Declaration*/
   (type = Type ()
   IdentList(type)
   <SEMICOLON>)

   |
   /*Expression*/
   (Expr()
   <SEMICOLON>)

   |
   /*SemiColon*/
   (<SEMICOLON>)/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ElsePart () :
{/*@bgen(jjtree) ElsePart */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElsePart */
   try {
/*@egen*/
   (LOOKAHEAD(1)
   <ELSE>
   Stmt())?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ForStmtC () :
{/*@bgen(jjtree) ForStmtC */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTMTC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStmtC */
   try {
/*@egen*/
   (Expr()
   <SEMICOLON>
   Expr()
   <CLOSEB>
   Stmt())
   |
   (<SEMICOLON>
   <CLOSEB>
   Stmt()
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void CompoundStmt () :
{/*@bgen(jjtree) CompoundStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompoundStmt */
   try {
/*@egen*/
   <OPENC>
   A()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void A () :
{/*@bgen(jjtree) A */
  SimpleNode jjtn000 = new SimpleNode(JJTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) A */
   try {
/*@egen*/
   (StmtList() <CLOSEC>)
   |
   (<CLOSEC>)/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void StmtList () :
{/*@bgen(jjtree) StmtList */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StmtList */
   try {
/*@egen*/
   Stmt()
   (StmtList())?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Variable Expr () :
{/*@bgen(jjtree) Expr */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String name ;
    String type;
    Variable v, r;
    Token t = null;
}
{/*@bgen(jjtree) Expr */
   try {
/*@egen*/
   (
       t = <IDENTIFIER>
       {
           name = t.image;
           type = variableType(name);
           v = new Variable (type,name);
       }
       r = ExprR (v)/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/
       {
          return r;
       }
   )
   |
   (
       r = Rvalue()/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/
       {
          return r;
       }
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
Variable ExprR (Variable v1) :
{/*@bgen(jjtree) ExprR */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPRR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Variable v2;
    boolean compatibleType;
    Quadruplet q;
    String op ;
    Token t;
}
{/*@bgen(jjtree) ExprR */
   try {
/*@egen*/
   (
        t = <ASSIGN>
        v2 = Expr ()
        {
            op = t.image;
            compatibleType = compatibleTypes(v1.getType(),v2.getType());
            if (compatibleType){
                q = new Quadruplet ( op , v2.getName(), "", v1.getName());
            }
        }/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return v1;
        }
   )
   |
   (
       v2 = TermR(v1)
       v2 = MagR(v2)
       v2 = RvalueR(v2)/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/
       {
            return v2;
       }
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Variable Rvalue () :
{/*@bgen(jjtree) Rvalue */
    SimpleNode jjtn000 = new SimpleNode(JJTRVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Variable v1,v2;
}
{/*@bgen(jjtree) Rvalue */
   try {
/*@egen*/
   v1 = MagB()
   v2 = RvalueR(v1)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
        return v2;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
Variable RvalueR (Variable v1) :
{/*@bgen(jjtree) RvalueR */
    SimpleNode jjtn000 = new SimpleNode(JJTRVALUER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String op, name,type;
    Variable v2, r, temp;
    Quadruplet q;
}
{/*@bgen(jjtree) RvalueR */
   try {
/*@egen*/
   (
       op = Compare ()
       v2 = Mag()
        {
            name = nextTemp();
            type = "int";
            temp = new Variable(type,name);
            if (v1.getType() == null || v2.getType() == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v1.getName(), v2.getName(), name);
            }
        }

        r = RvalueR(temp)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return r ;
        }
   )
   |/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
        return v1;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
String Compare () :
{/*@bgen(jjtree) Compare */
    SimpleNode jjtn000 = new SimpleNode(JJTCOMPARE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t = null;
}
{/*@bgen(jjtree) Compare */
   try {
/*@egen*/
   t = <Compare>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Variable Mag () :
{/*@bgen(jjtree) Mag */
    SimpleNode jjtn000 = new SimpleNode(JJTMAG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Variable v, r;
}
{/*@bgen(jjtree) Mag */
   try {
/*@egen*/
   v = Term()
   r = MagR(v)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
        return r ;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Variable MagR (Variable v1) :
{/*@bgen(jjtree) MagR */
    SimpleNode jjtn000 = new SimpleNode(JJTMAGR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String type;
    String name;
    Variable v2, r ;
    Variable temp ;
    String op ;
    Token t;
    Quadruplet q;
}
{/*@bgen(jjtree) MagR */
   try {
/*@egen*/
   (
        t = <PlusMinus>
        v2 = Term()
        {
            op = t.image;
            name = nextTemp();
            type = resultType (v1.getType(), v2.getType());
            temp = new Variable(type,name);
            if (type == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v1.getName(), v2.getName(), name);
            }
        }

        r = MagR(temp)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return r ;
        }
   )
   |
   (/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/
       {
           return v1 ;
       }
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Variable Term () :
{/*@bgen(jjtree) Term */
    SimpleNode jjtn000 = new SimpleNode(JJTTERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Variable v, r;
}
{/*@bgen(jjtree) Term */
   try {
/*@egen*/
   v = Factor()
   r = TermR(v)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
        return r ;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Variable TermR (Variable v1) :
{/*@bgen(jjtree) TermR */
    SimpleNode jjtn000 = new SimpleNode(JJTTERMR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String type;
    String name;
    Variable v2 , r ;
    Variable temp ;
    String op ;
    Token t;
    Quadruplet q;
}
{/*@bgen(jjtree) TermR */
   try {
/*@egen*/
   (

        t = <TermOp>
        v2 = Factor()
        {
            op = t.image;
            name = nextTemp();
            type = resultType (v1.getType(), v2.getType());
            temp = new Variable(type,name);
            if (type == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v1.getName(), v2.getName(), name);
            }
        }
        r = TermR(temp)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return r ;
        }
   )
   |
   (/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/
       {
           return v1 ;
       }
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/

}
Variable Factor () :
{/*@bgen(jjtree) Factor */
    SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String type;
    String name;
    Variable v ;
    Variable temp ;
    String val;
    String op ;
    Quadruplet q;
    Token t;
}
{/*@bgen(jjtree) Factor */
   try {
/*@egen*/
   (
        <OPENB>
        v = Expr()
        {
            return v ;
        }
        <CLOSEB>
   )
   |

   (
        t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            name = t.image;
            type = variableType (name);
            v = new Variable(name,type);
            return v ;
        }
   )
   |
   (
        t = <PlusMinus>
        v = Factor()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            op = t.image;
            name = nextTemp();
            type = v.getType();
            temp = new Variable(type,name);
            if (type == null){
                result.addError("unrecognized identifier");
            }
            else {
                q = new Quadruplet ( op , v.getName(), "", name);
            }
            return temp ;
        }
   )

   |
   (
       t = <FLOAT>/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/
       {
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "float";
            temp = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            return temp ;
       }
   )

   |
   (
       t = <INT>/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/
       {
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "int";
            temp = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            return temp ;
       }
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

/*No identifier conflict*/

Variable MagB () :
{/*@bgen(jjtree) MagB */
    SimpleNode jjtn000 = new SimpleNode(JJTMAGB);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Variable v, r;
}
{/*@bgen(jjtree) MagB */
   try {
/*@egen*/
   v = TermB()
   r =  MagR(v)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
        return r ;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
Variable TermB () :
{/*@bgen(jjtree) TermB */
    SimpleNode jjtn000 = new SimpleNode(JJTTERMB);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Variable v,r;
}
{/*@bgen(jjtree) TermB */
   try {
/*@egen*/
   v = FactorB()
   r = TermR(v)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
        return r ;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
Variable FactorB () :
{/*@bgen(jjtree) FactorB */
    SimpleNode jjtn000 = new SimpleNode(JJTFACTORB);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String type;
    String name;
    Variable v ;
    Token t;
    String val;
    String op ;
    Quadruplet q;
}
{/*@bgen(jjtree) FactorB */
   try {
/*@egen*/
   (
        <OPENB>
        v = Expr()
        {
            return v ;
        }
        <CLOSEB>
   )
   |
   (
        t = <PlusMinus>
        v = Factor()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            op = t.image;
            name = nextTemp ();
            type = v.getType();
            v = new Variable(type,name);
            q = new Quadruplet ( op , v.getName(), "", name);
            return v ;
        }
   )

   |
   (
       t = <FLOAT>/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/
       {
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "float";
            v = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            return v ;
       }
   )

   |
   (
       t = <INT>/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/
       {
            val = t.image;
            op = "=";
            name = nextTemp ();
            type = "int";
            v = new Variable(type,name);
            q = new Quadruplet ( op , val, "", name);
            return v ;
       }
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}